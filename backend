/* Estilos gerais */

body {
	margin: 0;
	padding: 0;
	font-family: Arial, sans-serif;
}

header {
	background-color: #333;
	color: #fff;
	padding: 20px;
}

nav ul {
	list-style: none;
	margin: 0;
	padding: 0;
	display: flex;
}

nav li {
	margin-right: 20px;
}

nav a {
	color: #fff;
	text-decoration: none;
}

main {
	padding: 20px;
}

footer {
	background-color: #333;
	color: #fff;
	padding: 20px;
	text-align: center;
}

/* Estilos específicos para os produtos */

.product {
	border: 1px solid #ccc;
	padding: 10px;
	margin-bottom: 20px;
	display: flex;
	flex-direction: column;
	align-items: center;
}

.product img {
	width: 200px;
	height: 200px;
	object-fit: cover;
	margin-bottom: 10px;
}

.product h2 {
	margin: 0;
}

.product p {
	margin: 0;
}

.product button {
	background-color: #333;
	color: #fff;
	border: none;
	padding: 10px;
	cursor: pointer;
	margin-top: 10px;
}

const express = require('express');
const bodyParser = require('body-parser');
const app = express();

const ProductService = require('./productService');
const productService = new ProductService();

app.use(bodyParser.json());

app.get('/api/products', (req, res) => {
    const products = productService.getAllProducts();
    res.json(products);
});

app.get('/api/products/:id', (req, res) => {
    const id = parseInt(req.params.id);
    const product = productService.getProductById(id);
    res.json(product);
});

app.post('/api/products', (req, res) => {
    const product = req.body;
    const newProduct = productService.addProduct(product);
    res.json(newProduct);
});

app.put('/api/products/:id', (req, res) => {
    const id = parseInt(req.params.id);
    const product = req.body;
    const updatedProduct = productService.updateProduct(id, product);
    res.json(updatedProduct);
});

app.delete('/api/products/:id', (req, res) => {
    const id = parseInt(req.params.id);
    productService.deleteProduct(id);
    res.sendStatus(204);
});

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
CREATE TABLE products (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  price DECIMAL(10,2) NOT NULL,
  description TEXT,
  image_url VARCHAR(255),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
INSERT INTO products (name, price, description, image_url)
VALUES ('Camiseta branca', 29.99, 'Camiseta de algodão macio', 'https://exemplo.com/camiseta-branca.jpg');
UPDATE products
SET price = 39.99, updated_at = CURRENT_TIMESTAMP
WHERE id = 1;
DELETE FROM products
WHERE id = 1;
SELECT * FROM products;
SELECT * FROM products
WHERE id = 2;
const express = require('express');
const bodyParser = require('body-parser');
const app = express();

const ProductService = require('./productService');
const productService = new ProductService();

app.use(bodyParser.json());

app.get('/api/products', (req, res) => {
    const products = productService.getAllProducts();
    res.json(products);
});

app.get('/api/products/:id', (req, res) => {
    const id = parseInt(req.params.id);
    const product = productService.getProductById(id);
    res.json(product);
});

app.post('/api/products', (req, res) => {
    const product = req.body;
    const newProduct = productService.addProduct(product);
    res.json(newProduct);
});

app.put('/api/products/:id', (req, res) => {
    const id = parseInt(req.params.id);
    const product = req.body;
    const updatedProduct = productService.updateProduct(id, product);
    res.json(updatedProduct);
});

app.delete('/api/products/:id', (req, res) => {
    const id = parseInt(req.params.id);
    productService.deleteProduct(id);
    res.sendStatus(204);
});

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
